'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import Link from 'next/link'
import BackgroundAnimation from '@/components/BackgroundAnimation'
import ServiceCard from '@/components/ServiceCard'
import ProjectCard from '@/components/ProjectCard'
import SolutionCard from '@/components/SolutionCard'
import StepCard from '@/components/StepCard'
import RequestTerminal from '@/components/RequestTerminal'

// Cyberpunk Icons
import BotIcon from '@/components/icons/BotIcon'
import IntegrationIcon from '@/components/icons/IntegrationIcon'
import AutomationIcon from '@/components/icons/AutomationIcon'
import DashboardIcon from '@/components/icons/DashboardIcon'
import TerminalIcon from '@/components/icons/TerminalIcon'
import CodeIcon from '@/components/icons/CodeIcon'
import CheckCircleIcon from '@/components/icons/CheckCircleIcon'
import RocketIcon from '@/components/icons/RocketIcon'

// Premium Section
import CustomBotSection from '@/components/CustomBotSection'
import CustomBotForm from '@/components/CustomBotForm'

export default function RussianHome() {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedBot, setSelectedBot] = useState('Work Report Bot')
  const [customModalOpen, setCustomModalOpen] = useState(false)
  
  const telegramLink = "https://t.me/alex_nomad_dev"

  const handleOrder = (botName) => {
    setSelectedBot(botName)
    setIsModalOpen(true)
  }

  // Services data
  const services = [
    {
      IconComponent: BotIcon,
      title: 'Telegram-–±–æ—Ç—ã',
      desc: '–°–æ–∑–¥–∞—é –±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á: –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏.',
      iconColor: 'text-accent-cyan'
    },
    {
      IconComponent: IntegrationIcon,
      title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      desc: '–°–≤—è–∑—ã–≤–∞—é –≤–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã: CRM, Google Sheets, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, API –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä—É—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.',
      iconColor: 'text-accent-purple'
    },
    {
      IconComponent: AutomationIcon,
      title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      desc: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é —Ä—É—Ç–∏–Ω—É —á–µ—Ä–µ–∑ n8n, Zapier –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã. –û—Å–≤–æ–±–æ–∂–¥–∞—é –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á.',
      iconColor: 'text-accent-cyan'
    },
    {
      IconComponent: DashboardIcon,
      title: 'Dashboards',
      desc: '–î–µ–ª–∞—é –Ω–∞–≥–ª—è–¥–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –≤ Google Sheets, Notion –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.',
      iconColor: 'text-accent-purple'
    }
  ]

  // Projects data
  const projects = [
    {
      title: '–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤',
      desc: 'Telegram-–±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.',
      tech: ['Python', 'aiogram', 'Google Sheets API', 'PostgreSQL']
    },
    {
      title: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏—ë–º–∞ –∑–∞–∫–∞–∑–æ–≤',
      desc: '–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏ —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ.',
      tech: ['Python', 'Telegram Bot API', 'SQLite', 'n8n']
    },
    {
      title: 'CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –±—É–∫–∏–Ω–≥–∞',
      desc: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É Telegram-–±–æ—Ç–æ–º, Google Calendar –∏ CRM-—Å–∏—Å—Ç–µ–º–æ–π.',
      tech: ['Python', 'Google Calendar API', 'Bitrix24 API', 'Webhooks']
    }
  ]

  // Ready Solutions data
  const solutions = [
    {
      name: 'Work Report Bot',
      desc: '–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ Google Sheets –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram.',
      price: '–æ—Ç 9 900 ‚ÇΩ',
      tag: '–ë–∏–∑–Ω–µ—Å / –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å'
    },
    {
      name: 'Order & Delivery Bot',
      desc: '–ü—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤, —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.',
      price: '–æ—Ç 12 900 ‚ÇΩ',
      tag: '–°–µ—Ä–≤–∏—Å / –î–æ—Å—Ç–∞–≤–∫–∞'
    },
    {
      name: 'Booking Bot',
      desc: '–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.',
      price: '–æ—Ç 14 900 ‚ÇΩ',
      tag: '–£—Å–ª—É–≥–∏ / –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
    },
    {
      name: 'Feedback & Support Bot',
      desc: '–ü—Ä–∏—ë–º –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ–±—Ä–∞—â–µ–Ω–∏–π, –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      price: '–æ—Ç 8 900 ‚ÇΩ',
      tag: '–ö–ª–∏–µ–Ω—Ç—ã / –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    }
  ]

  // Process steps data
  const processSteps = [
    {
      step: '1',
      IconComponent: TerminalIcon,
      title: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
      desc: '–í—ã –ø–∏—à–µ—Ç–µ –º–Ω–µ –≤ Telegram, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∑–∞–¥–∞—á—É. –Ø –∑–∞–¥–∞—é —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ—à–µ–Ω–∏–µ.',
      iconColor: 'text-accent-cyan'
    },
    {
      step: '2',
      IconComponent: CheckCircleIcon,
      title: '–û—Ü–µ–Ω–∫–∞ –∏ –¥–æ–≥–æ–≤–æ—Ä',
      desc: '–û—Ü–µ–Ω–∏–≤–∞—é —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏, –∑–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ.',
      iconColor: 'text-accent-purple'
    },
    {
      step: '3',
      IconComponent: CodeIcon,
      title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      desc: '–ü–∏—à—É –∫–æ–¥, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —Ç–µ—Å—Ç–∏—Ä—É—é. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–æ–∂–µ—Ç–µ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏.',
      iconColor: 'text-accent-cyan'
    },
    {
      step: '4',
      IconComponent: RocketIcon,
      title: '–ó–∞–ø—É—Å–∫ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      desc: '–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —è –ø—Ä–æ–≤–æ–∂—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.',
      iconColor: 'text-accent-purple'
    }
  ]

  return (
    <main className="relative min-h-screen bg-dark text-white">
      {/* Background Animation */}
      <BackgroundAnimation />

      {/* Language Switcher */}
      <div className="fixed top-6 right-6 z-50">
        <Link href="/">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="px-4 py-2 bg-dark-secondary border border-accent-purple/30 rounded-lg text-accent-cyan text-sm font-mono hover:border-accent-cyan transition-all"
          >
            üåê Change Language
          </motion.button>
        </Link>
      </div>

      {/* Hero Section */}
      <section className="relative min-h-screen flex items-center justify-center px-6 pt-20 pb-10">
        <div className="max-w-5xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h1 className="text-6xl md:text-8xl font-bold mb-6 text-glow-lg">
              ALEX NOMAD
            </h1>
            <p className="text-xl md:text-2xl text-accent-cyan mb-8">
              Telegram-–±–æ—Ç—ã & –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞
            </p>
            <p className="text-lg text-gray-400 mb-12 max-w-2xl mx-auto leading-relaxed">
              –°–æ–∑–¥–∞—é –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Telegram-–±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. 
              –ë–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –∫–æ–¥ –∏ —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É.
            </p>
            <div className="flex gap-4 justify-center flex-wrap">
              <a href={telegramLink} target="_blank" rel="noopener noreferrer">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="px-8 py-4 bg-gradient-primary rounded-xl text-black font-bold text-lg shadow-glow-purple"
                >
                  –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
                </motion.button>
              </a>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => document.getElementById('solutions').scrollIntoView({ behavior: 'smooth' })}
                className="px-8 py-4 bg-dark-secondary border-2 border-accent-cyan rounded-xl text-accent-cyan font-bold text-lg hover:bg-accent-cyan/10 transition-all"
              >
                –ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
              </motion.button>
            </div>
          </motion.div>
        </div>
      </section>

      {/* What I Do Section */}
      <section className="py-20 px-6">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-4">–ß–µ–º —è –∑–∞–Ω–∏–º–∞—é—Å—å</h2>
            <p className="text-gray-400 text-lg">
              –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏ –≤–Ω–µ–¥—Ä—è—é —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 gap-8">
            {services.map((service, index) => (
              <ServiceCard
                key={index}
                IconComponent={service.IconComponent}
                title={service.title}
                desc={service.desc}
                index={index}
                iconColor={service.iconColor}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Projects Section */}
      <section className="py-20 px-6 bg-dark-secondary/50">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-4">–ü—Ä–æ–µ–∫—Ç—ã</h2>
            <p className="text-gray-400 text-lg">
              –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            </p>
          </motion.div>

          <div className="grid md:grid-cols-3 gap-8">
            {projects.map((project, index) => (
              <ProjectCard
                key={index}
                title={project.title}
                desc={project.desc}
                tech={project.tech}
                index={index}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Custom Bot Development Section */}
      <CustomBotSection onOpenForm={() => setCustomModalOpen(true)} />

      {/* Ready Solutions Section */}
      <section id="solutions" className="py-20 px-6">
        <div className="max-w-7xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-4">–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è</h2>
            <p className="text-gray-400 text-lg">
              –í—ã–±–∏—Ä–∞–π—Ç–µ –≥–æ—Ç–æ–≤–æ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ 1‚Äì3 –¥–Ω—è
            </p>
          </motion.div>

          <div className="grid md:grid-cols-2 gap-8">
            {solutions.map((solution, index) => (
              <SolutionCard
                key={index}
                name={solution.name}
                desc={solution.desc}
                price={solution.price}
                tag={solution.tag}
                index={index}
                onOrder={handleOrder}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Process Section */}
      <section className="py-20 px-6 bg-dark-secondary/50">
        <div className="max-w-4xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-4">–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é</h2>
            <p className="text-gray-400 text-lg">
              –ü—Ä–æ—Å—Ç–æ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –∏–¥–µ–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞
            </p>
          </motion.div>

          <div className="space-y-0">
            {processSteps.map((step, index) => (
              <StepCard
                key={index}
                step={step.step}
                IconComponent={step.IconComponent}
                title={step.title}
                desc={step.desc}
                index={index}
                iconColor={step.iconColor}
              />
            ))}
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section className="py-20 px-6">
        <div className="max-w-3xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
          >
            <h2 className="text-4xl md:text-5xl font-bold mb-6">–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</h2>
            <p className="text-gray-400 text-lg mb-8 leading-relaxed">
              –ü–∏—à–∏—Ç–µ –≤ Telegram ‚Äî –æ–±—Å—É–¥–∏–º –≤–∞—à—É –∑–∞–¥–∞—á—É, –æ—Ü–µ–Ω–∏–º —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å. 
              –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
            </p>
            
            <a href={telegramLink} target="_blank" rel="noopener noreferrer">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-10 py-5 bg-gradient-primary rounded-xl text-black font-bold text-xl shadow-glow-purple mb-8"
              >
                –°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram
              </motion.button>
            </a>

            <div className="text-accent-cyan font-mono text-sm">
              @alex_nomad_dev
            </div>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 px-6 border-t border-gray-800">
        <div className="max-w-7xl mx-auto text-center text-gray-500 text-sm">
          <p>¬© 2025 ALEX NOMAD ‚Äî Telegram Bots & Automation</p>
          <p className="mt-2 font-mono">–°–¥–µ–ª–∞–Ω–æ —Å üíú –∏ üíö</p>
        </div>
      </footer>

      {/* Request Terminal Modal */}
      <RequestTerminal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        initialBotType={selectedBot}
      />

      {/* Custom Bot Form Modal */}
      <CustomBotForm
        isOpen={customModalOpen}
        onClose={() => setCustomModalOpen(false)}
      />
    </main>
  )
}
